{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "import pathlib\n",
    "import time\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import random\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.nn.functional as F\n",
    "import torch.optim as optim\n",
    "\n",
    "from torch.utils.data import DataLoader, TensorDataset\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Local\n",
    "cwd = pathlib.Path().resolve()\n",
    "src = cwd.parent\n",
    "root = src.parent\n",
    "sys.path.append(str(src))\n",
    "sys.path.append(str(root))\n",
    "\n",
    "from utils.watertopo import WaterTopo\n",
    "from utils.simulation import Simulation\n",
    "from utils.utils import count_parameters, create_sequence, recursive_pred, mse_per_timestep\n",
    "from utils.train import train_and_validate, evaluate_model, train\n",
    "from models.convlstm import ConvLSTMCell"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Is CUDA enabled? True\n",
      "Number of GPUs 1\n"
     ]
    }
   ],
   "source": [
    "#initialize GPU -  In case of windows use cuda instead of nps\n",
    "device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
    "\n",
    "print(\"Is CUDA enabled?\",torch.cuda.is_available())\n",
    "print(\"Number of GPUs\",torch.cuda.device_count())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "class BasicCNN(nn.Module):\n",
    "    def __init__(self, \n",
    "                 input_channels,\n",
    "                 hidden_size,\n",
    "                 output_channels=1,\n",
    "                 bias=True,\n",
    "                 kernel_size=(3, 3, 3, 3), \n",
    "                 pool_kernel_size=1,\n",
    "                 pool_stride=1, \n",
    "                 nonlinearity=F.relu\n",
    "                 ):\n",
    "        super(BasicCNN, self).__init__()\n",
    "\n",
    "        # Convolutional layers\n",
    "        self.conv1 = nn.Conv2d(input_channels, hidden_size, kernel_size=kernel_size[0], padding=1, bias=bias)\n",
    "        self.conv2 = nn.Conv2d(hidden_size, hidden_size, kernel_size=kernel_size[1], padding=1, bias=bias)\n",
    "        self.conv3 = nn.Conv2d(hidden_size, hidden_size, kernel_size=kernel_size[2], padding=1, bias=bias)\n",
    "        self.conv4 = nn.Conv2d(hidden_size, hidden_size, kernel_size=kernel_size[3], padding=1, bias=bias)\n",
    "\n",
    "        # Batch normalization layers\n",
    "        self.batchnorm1 = nn.BatchNorm2d(num_features=hidden_size)\n",
    "        self.batchnorm2 = nn.BatchNorm2d(num_features=hidden_size)\n",
    "        self.batchnorm3 = nn.BatchNorm2d(num_features=hidden_size)\n",
    "        self.batchnorm4 = nn.BatchNorm2d(num_features=hidden_size)\n",
    "\n",
    "        # Pooling has no learnable parameters, so we can just use one\n",
    "        self.pool = nn.AvgPool2d(kernel_size=pool_kernel_size, stride=pool_stride)\n",
    "\n",
    "        # Definition of nonlinearity function\n",
    "        self.nonlinearity=nonlinearity\n",
    "\n",
    "        # Last layer\n",
    "        self.fc = nn.Conv2d(hidden_size, output_channels, kernel_size=1, bias=bias)\n",
    "\n",
    "    def forward(self, x):\n",
    "        # Convolutions\n",
    "        # print(\"input: \", x.size())\n",
    "        x = self.pool(self.nonlinearity(self.batchnorm1(self.conv1(x))))\n",
    "        x = self.pool(self.nonlinearity(self.batchnorm2(self.conv2(x))))\n",
    "        x = self.pool(self.nonlinearity(self.batchnorm3(self.conv3(x))))\n",
    "        x = self.pool(self.nonlinearity(self.batchnorm4(self.conv4(x))))\n",
    "        # print(\"after 4 convolution: \", x.size())\n",
    "\n",
    "        # Output layer\n",
    "        x = self.fc(x)\n",
    "        # print(\"output: \", x.size())\n",
    "\n",
    "        return x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CNN --> num. trainable parameters:   28641\n"
     ]
    }
   ],
   "source": [
    "model = BasicCNN(input_channels=2,\n",
    "                 hidden_size=32,\n",
    "                 output_channels=1,\n",
    "                 bias=True,\n",
    "                 kernel_size=(3, 3, 3, 3), \n",
    "                 pool_kernel_size=1,\n",
    "                 pool_stride=1, \n",
    "                 nonlinearity=F.relu\n",
    "                 ).to(device)\n",
    "\n",
    "print(f\"CNN --> num. trainable parameters:{count_parameters(model):8d}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Contents in this cell are copied from train.py and utils.py, and adjusted slightly to fit this application\n",
    "\n",
    "def evaluate_model(model, test_loader, criterion, device):\n",
    "    model.eval()  # Set the model to evaluation mode\n",
    "    test_loss = 0\n",
    "\n",
    "    with torch.no_grad():  # No need to track gradients during evaluation\n",
    "        for inputs, targets in test_loader:\n",
    "            inputs, targets = inputs.to(device), targets.to(device)\n",
    "            outputs = model(inputs)\n",
    "            loss = criterion(outputs, targets)\n",
    "            test_loss += loss.item()\n",
    "\n",
    "    avg_test_loss = test_loss / len(test_loader)\n",
    "    return avg_test_loss\n",
    "\n",
    "\n",
    "def train_and_validate(model, train_loader, val_loader, criterion, optimizer, num_epochs, device, save_path):\n",
    "    best_val_loss = float(\"inf\")  # Track the best validation loss\n",
    "    train_losses = []\n",
    "    val_losses = []\n",
    "\n",
    "    start_time = time.time()  # Start training time\n",
    "\n",
    "    for epoch in range(num_epochs):\n",
    "        # Training Phase\n",
    "        model.train()\n",
    "        total_train_loss = 0\n",
    "        for inputs, targets in train_loader:\n",
    "            inputs, targets = inputs.to(device), targets.to(device)\n",
    "            optimizer.zero_grad()\n",
    "            outputs = model(inputs)\n",
    "            loss = criterion(outputs, targets)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            total_train_loss += loss.item()\n",
    "\n",
    "        avg_train_loss = total_train_loss / len(train_loader)\n",
    "        train_losses.append(avg_train_loss)\n",
    "\n",
    "        # Validation Phase\n",
    "        avg_val_loss = evaluate_model(model, val_loader, criterion, device)\n",
    "        val_losses.append(avg_val_loss)\n",
    "\n",
    "        # Save Best Model\n",
    "        if avg_val_loss < best_val_loss:\n",
    "            best_val_loss = avg_val_loss\n",
    "            torch.save(model.state_dict(), save_path)\n",
    "\n",
    "        if (epoch + 1) % 1 == 0:\n",
    "            print(f'Epoch {epoch+1}/{num_epochs}', f'Train Loss: {avg_train_loss:.4f}, '\n",
    "                  f'Validation Loss: {avg_val_loss:.4f}', f'Best Validation Loss: {best_val_loss:.4f}')\n",
    "    train_time = time.time() - start_time\n",
    "    print(\"Training complete.\")\n",
    "    return train_losses, val_losses, best_val_loss, train_time\n",
    "\n",
    "\n",
    "def train(\n",
    "        model,\n",
    "        device,\n",
    "        root,\n",
    "        model_name,\n",
    "        channels=2,\n",
    "        T=5,\n",
    "        H=1,\n",
    "        sim_amount=3,\n",
    "        training_size=0.8,\n",
    "        use_augmented_data=True,\n",
    "        batch_size=4,\n",
    "        num_epochs = 200,\n",
    "        lr = 0.0005,\n",
    "        criterion = nn.MSELoss(),\n",
    "        optimizer = optim.AdamW,\n",
    "        ):\n",
    "\n",
    "    \"\"\"\n",
    "    This method trains a simple RNN. Given a single timestep consisting of water depth and topography (both 64*64), the RNN predicts a single step ahead. The best model state is\n",
    "    saved following the save_path, and also returned by the method.\n",
    "    \n",
    "    Description of arguments:\n",
    "    - model: the model to be trained, should be an instance of the class SimpleRNN;\n",
    "    - channels (int): number of channels that the loaded model is compatible with (default 2, i.e. DEM & WED);\n",
    "    - sim_amount (int): number of simulations of which the data is loaded and used for training, with a maximum of 400;\n",
    "    - training_size (float): fraction of data to use for training (validation uses the fraction 1 - training_size);\n",
    "    - use_augmented_data (boolean): if True, the train function will include augmented data when (randomly) selecting training and validation data;\n",
    "    - batch_size (int): batch size used during training (you can modify this based on your requirements);\n",
    "    - T (int): number of input time steps. Make sure this number is compatible with the defined model;\n",
    "    - H (int): number of predicted time steps (default 1). Make sure this number is compatible with the defined model;\n",
    "    - num_epochs (int): number of epochs used during training;\n",
    "    - lr (float): learning rate used during training;\n",
    "    - criterion: Loss function, default nn.MSELoss()\n",
    "    - optimizer: optimizer used for training, default optim.AdamW\n",
    "    - defice: the device used for training the model (i.e. CUDA [GPU] or CPU).\n",
    "    - model_name (string): the best model state will be saved in ../results/trained_models/ under this name\n",
    "\n",
    "    returns: model, train_losses, val_losses, best_val_loss, time\n",
    "    \"\"\"\n",
    "    # load simulations to be used for training\n",
    "    if channels == 2:\n",
    "        sims = WaterTopo.load_simulations(str(root)+\"/data/normalized_data/tra_val\", sim_amount=sim_amount, number_grids=64, use_augmented_data=use_augmented_data)\n",
    "    elif channels == 4:\n",
    "        sims = Simulation.load_simulations(str(root)+\"/data/normalized_data/tra_val\", sim_amount=sim_amount, number_grids=64, use_augmented_data=use_augmented_data)\n",
    "\n",
    "    X, Y = create_sequence(sims, T, H)\n",
    "\n",
    "    # We keep track of indexes of train and validation.\n",
    "    X_tra, X_tst, Y_tra, Y_tst, ix_tra, ix_tst = train_test_split(\n",
    "        X, Y, np.arange(X.shape[0]), test_size=1-training_size, shuffle=True, random_state=42)\n",
    "    \n",
    "    # Split the existing test dataset into validation and test sets (50/50 split)\n",
    "    X_val, X_tst, Y_val, Y_tst, ix_val, ix_tst = train_test_split(\n",
    "        X_tst, Y_tst, ix_tst, test_size=0.5, shuffle=True, random_state=42)\n",
    "    \n",
    "    # print(X_tra.shape)\n",
    "    # print(Y_tra.shape)\n",
    "    \n",
    "    #create datasets and data loaders\n",
    "    train_dataset = TensorDataset(torch.tensor(X_tra, dtype=torch.float32), torch.tensor(Y_tra, dtype=torch.float32))\n",
    "    val_dataset = TensorDataset(torch.tensor(X_val, dtype=torch.float32), torch.tensor(Y_val, dtype=torch.float32))\n",
    "\n",
    "    train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
    "    val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)\n",
    "\n",
    "    # defining the optimizer\n",
    "    optimizer = optimizer(model.parameters(), lr=lr)\n",
    "\n",
    "    # defining the save path\n",
    "    save_path = \"../results/trained_models/\" + model_name\n",
    "\n",
    "    # training\n",
    "    print(\"starting training\")\n",
    "    train_losses, val_losses, best_val_loss, time = train_and_validate(model, train_loader, val_loader, criterion, optimizer, num_epochs, device, save_path)\n",
    "\n",
    "    # Load the best model\n",
    "    model.load_state_dict(torch.load(save_path))\n",
    "\n",
    "    return model, train_losses, val_losses, best_val_loss, time\n",
    "\n",
    "\n",
    "def create_sequence(series, T=5, H=1):\n",
    "    \"\"\"\n",
    "    Create sequence of input X and output Y from a last of Simulation or WaterTopo objects:\n",
    "    - series: list of Simulation or WaterTopo objects\n",
    "\n",
    "\n",
    "    - X: input for NN, shape [T * channels * height * width]\n",
    "    - Y: output for NN [H * height * width]\n",
    "    \"\"\"\n",
    "    if isinstance(series[0], Simulation):\n",
    "        channels = 4\n",
    "    elif isinstance(series[0], WaterTopo):\n",
    "        channels = 2\n",
    "    else:\n",
    "        raise Exception(\"Wrong input type, use a list of Simulations or WaterTopo objects.\")\n",
    "    \n",
    "\n",
    "    duration = series[0].wd.shape[0]\n",
    "\n",
    "    height = series[0].wd.shape[1]\n",
    "    width = series[0].wd.shape[2]\n",
    "\n",
    "    seq_per_sim = duration-T-H\n",
    "    num_sims = len(series)\n",
    "\n",
    "    X = np.zeros((seq_per_sim*num_sims, T, channels, height, width))\n",
    "    Y = np.zeros((seq_per_sim*num_sims, H, channels-1, height, width))\n",
    "\n",
    "    for i,serie in enumerate(series):\n",
    "        j = i * seq_per_sim\n",
    "        for t in range(seq_per_sim):\n",
    "            if channels == 2:               \n",
    "                X[j+t:j+t+T, :,0,:,:] = np.tile(serie.topography, (T,1,1))\n",
    "                X[j+t:j+t+T, :,1,:,:] = serie.wd[t:t+T]\n",
    "                \n",
    "                Y[j+t+T : j+t+T+H,:,0,:,:] = serie.wd[t+T:t+T+H]\n",
    "\n",
    "            elif channels == 4:\n",
    "                X[j+t:j+t+T, :,0,:,:] = np.tile(serie.topography, (T,1,1))\n",
    "                X[j+t:j+t+T, :,1,:,:] = serie.wd[t:t+T]\n",
    "                X[j+t:j+t+T, :,2,:,:] = serie.wd[t:t+T]\n",
    "                X[j+t:j+t+T, :,3,:,:] = serie.wd[t:t+T]\n",
    "\n",
    "                Y[j+t+T: j+t+T+H, :,0,:,:] = serie.wd[t+T:t+T+H]\n",
    "                Y[j+t+T: j+t+T+H, :,1,:,:] = serie.vx[t+T:t+T+H]\n",
    "                Y[j+t+T: j+t+T+H, :,2,:,:] = serie.vy[t+T:t+T+H]\n",
    "\n",
    "\n",
    "    # print(\"shape of X: \", X.shape)\n",
    "    # print(\"shape of Y: \", Y.shape)\n",
    "\n",
    "    if H==1 and T==1:\n",
    "        X = X[:,0,:,:,:]\n",
    "        Y = Y[:,0,:,:,:]\n",
    "\n",
    "    print(\"shape of X: \", X.shape)\n",
    "    print(\"shape of Y: \", Y.shape)\n",
    "\n",
    "    return X, Y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape of X:  (7600, 2, 64, 64)\n",
      "shape of Y:  (7600, 1, 64, 64)\n",
      "Epoch 1/20 Train Loss: 0.0028, Validation Loss: 0.0006 Best Validation Loss: 0.0006\n",
      "Epoch 2/20 Train Loss: 0.0009, Validation Loss: 0.0004 Best Validation Loss: 0.0004\n",
      "Epoch 3/20 Train Loss: 0.0007, Validation Loss: 0.0004 Best Validation Loss: 0.0004\n",
      "Epoch 4/20 Train Loss: 0.0006, Validation Loss: 0.0003 Best Validation Loss: 0.0003\n",
      "Epoch 5/20 Train Loss: 0.0006, Validation Loss: 0.0003 Best Validation Loss: 0.0003\n",
      "Epoch 6/20 Train Loss: 0.0006, Validation Loss: 0.0003 Best Validation Loss: 0.0003\n",
      "Epoch 7/20 Train Loss: 0.0006, Validation Loss: 0.0003 Best Validation Loss: 0.0003\n",
      "Epoch 8/20 Train Loss: 0.0006, Validation Loss: 0.0005 Best Validation Loss: 0.0003\n",
      "Epoch 9/20 Train Loss: 0.0006, Validation Loss: 0.0003 Best Validation Loss: 0.0003\n",
      "Epoch 10/20 Train Loss: 0.0006, Validation Loss: 0.0003 Best Validation Loss: 0.0003\n",
      "Epoch 11/20 Train Loss: 0.0006, Validation Loss: 0.0003 Best Validation Loss: 0.0003\n",
      "Epoch 12/20 Train Loss: 0.0006, Validation Loss: 0.0003 Best Validation Loss: 0.0003\n",
      "Epoch 13/20 Train Loss: 0.0006, Validation Loss: 0.0003 Best Validation Loss: 0.0003\n",
      "Epoch 14/20 Train Loss: 0.0006, Validation Loss: 0.0003 Best Validation Loss: 0.0003\n",
      "Epoch 15/20 Train Loss: 0.0005, Validation Loss: 0.0003 Best Validation Loss: 0.0003\n",
      "Epoch 16/20 Train Loss: 0.0006, Validation Loss: 0.0003 Best Validation Loss: 0.0003\n",
      "Epoch 17/20 Train Loss: 0.0005, Validation Loss: 0.0003 Best Validation Loss: 0.0003\n",
      "Epoch 18/20 Train Loss: 0.0005, Validation Loss: 0.0003 Best Validation Loss: 0.0003\n",
      "Epoch 19/20 Train Loss: 0.0006, Validation Loss: 0.0003 Best Validation Loss: 0.0003\n",
      "Epoch 20/20 Train Loss: 0.0006, Validation Loss: 0.0003 Best Validation Loss: 0.0003\n",
      "Training complete.\n"
     ]
    }
   ],
   "source": [
    "model, train_losses, val_losses, best_val_loss, time = train(model,\n",
    "                                                 device=device,\n",
    "                                                 root=root,\n",
    "                                                 model_name = 'CNN_kevin',\n",
    "                                                 channels=2,\n",
    "                                                 T=1,\n",
    "                                                 H=1,\n",
    "                                                 sim_amount=80,\n",
    "                                                 training_size=0.8,\n",
    "                                                 use_augmented_data=False,\n",
    "                                                 batch_size=10,\n",
    "                                                 num_epochs=20,\n",
    "                                                 lr=0.005,\n",
    "                                                 criterion=nn.MSELoss(),\n",
    "                                                 optimizer=optim.AdamW,\n",
    "                                                 )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.legend.Legend at 0x1ce946505e0>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot validation loss\n",
    "fig, ax = plt.subplots(figsize=(20, 5))\n",
    "ax.plot(train_losses, label='Training Loss')\n",
    "ax.plot(val_losses, label='Validation Loss')\n",
    "ax.set_xlabel('Epochs')\n",
    "ax.set_ylabel('Loss')\n",
    "ax.set_title('Training and validation losses - CNN')\n",
    "ax.legend()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 2000x1000 with 8 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's try the model!\n",
    "model.eval()\n",
    "\n",
    "grid_size = 64\n",
    "channels = 2\n",
    "\n",
    "f,axs = plt.subplots(2, 4, figsize=(20,10))\n",
    "axs = axs.reshape(-1)\n",
    "\n",
    "for i in range(0, len(axs), 2):\n",
    "  with torch.no_grad():\n",
    "      # Randomly select a simulation\n",
    "      random_index = random.randint(0, 80)\n",
    "      sim = WaterTopo.load_simulations(str(root)+\"/data/normalized_data/tra_val/\", \n",
    "                                       1, \n",
    "                                       grid_size)[0]\n",
    "\n",
    "      inputs = np.zeros((1, channels, grid_size, grid_size))\n",
    "      targets = np.zeros((1, grid_size, grid_size))\n",
    "\n",
    "      id = random.randint(0, 95)\n",
    "\n",
    "      inputs[0, 0,:,:] = sim.topography\n",
    "      inputs[0, 1,:,:] = sim.return_timestep(id)\n",
    "      targets[0, :,:]  = sim.return_timestep(id+1)\n",
    "\n",
    "      # print(inputs.shape)\n",
    "      # print(targets.shape)\n",
    "      \n",
    "      # inputs, target = inputs.to(device).unsqueeze(0), target.to(device).unsqueeze(0)\n",
    "\n",
    "      # Predict\n",
    "      inputs = torch.tensor(inputs, dtype=torch.float32).to(device)\n",
    "      inputs.cpu()\n",
    "      prediction = model(inputs).cpu()\n",
    "\n",
    "      # Plotting inputs (time series)\n",
    "      axs[i].imshow(targets[0,:,:])\n",
    "      axs[i+1].imshow(prediction[0,0,:,:])\n",
    "\n",
    "      axs[i].set_title(f\"Target: (test) simulation {random_index}\")\n",
    "      axs[i+1].set_title(f\"Prediction: (test) simulation {random_index}\")\n",
    "\n",
    "f.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "conv2d() received an invalid combination of arguments - got (method, Parameter, Parameter, tuple, tuple, tuple, int), but expected one of:\n * (Tensor input, Tensor weight, Tensor bias, tuple of ints stride, tuple of ints padding, tuple of ints dilation, int groups)\n      didn't match because some of the arguments have invalid types: (!method!, !Parameter!, !Parameter!, !tuple of (int, int)!, !tuple of (int, int)!, !tuple of (int, int)!, int)\n * (Tensor input, Tensor weight, Tensor bias, tuple of ints stride, str padding, tuple of ints dilation, int groups)\n      didn't match because some of the arguments have invalid types: (!method!, !Parameter!, !Parameter!, !tuple of (int, int)!, !tuple of (int, int)!, !tuple of (int, int)!, int)\n",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[1;32mIn[10], line 33\u001b[0m\n\u001b[0;32m     27\u001b[0m \u001b[38;5;66;03m# print(inputs.shape)\u001b[39;00m\n\u001b[0;32m     28\u001b[0m \u001b[38;5;66;03m# print(targets.shape)\u001b[39;00m\n\u001b[0;32m     29\u001b[0m \u001b[38;5;66;03m# print(outputs.shape)\u001b[39;00m\n\u001b[0;32m     30\u001b[0m \u001b[38;5;66;03m# print(input.shape)\u001b[39;00m\n\u001b[0;32m     32\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m t \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(\u001b[38;5;241m0\u001b[39m, sim_length):\n\u001b[1;32m---> 33\u001b[0m    outputs[t,:,:] \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43minput\u001b[39;49m\u001b[43m)\u001b[49m\u001b[38;5;241m.\u001b[39mcpu()\n\u001b[0;32m     34\u001b[0m    inputs[\u001b[38;5;241m0\u001b[39m,\u001b[38;5;241m1\u001b[39m,:,:] \u001b[38;5;241m=\u001b[39m outputs[t,:,:]\n\u001b[0;32m     37\u001b[0m \u001b[38;5;66;03m# outputs = recursive_pred(model, inputs, 96, include_first_timestep=False)\u001b[39;00m\n",
      "File \u001b[1;32mc:\\Users\\khdeb\\Anaconda3\\envs\\dsaie\\lib\\site-packages\\torch\\nn\\modules\\module.py:1518\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1516\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[0;32m   1517\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m-> 1518\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32mc:\\Users\\khdeb\\Anaconda3\\envs\\dsaie\\lib\\site-packages\\torch\\nn\\modules\\module.py:1527\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1522\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[0;32m   1523\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[0;32m   1524\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[0;32m   1525\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[0;32m   1526\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[1;32m-> 1527\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m   1529\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m   1530\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "Cell \u001b[1;32mIn[4], line 38\u001b[0m, in \u001b[0;36mBasicCNN.forward\u001b[1;34m(self, x)\u001b[0m\n\u001b[0;32m     35\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, x):\n\u001b[0;32m     36\u001b[0m     \u001b[38;5;66;03m# Convolutions\u001b[39;00m\n\u001b[0;32m     37\u001b[0m     \u001b[38;5;66;03m# print(\"input: \", x.size())\u001b[39;00m\n\u001b[1;32m---> 38\u001b[0m     x \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpool(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnonlinearity(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbatchnorm1(\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconv1\u001b[49m\u001b[43m(\u001b[49m\u001b[43mx\u001b[49m\u001b[43m)\u001b[49m)))\n\u001b[0;32m     39\u001b[0m     x \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpool(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnonlinearity(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbatchnorm2(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconv2(x))))\n\u001b[0;32m     40\u001b[0m     x \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpool(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mnonlinearity(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mbatchnorm3(\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mconv3(x))))\n",
      "File \u001b[1;32mc:\\Users\\khdeb\\Anaconda3\\envs\\dsaie\\lib\\site-packages\\torch\\nn\\modules\\module.py:1518\u001b[0m, in \u001b[0;36mModule._wrapped_call_impl\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1516\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_compiled_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)  \u001b[38;5;66;03m# type: ignore[misc]\u001b[39;00m\n\u001b[0;32m   1517\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m-> 1518\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_call_impl(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[1;32mc:\\Users\\khdeb\\Anaconda3\\envs\\dsaie\\lib\\site-packages\\torch\\nn\\modules\\module.py:1527\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[1;34m(self, *args, **kwargs)\u001b[0m\n\u001b[0;32m   1522\u001b[0m \u001b[38;5;66;03m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[0;32m   1523\u001b[0m \u001b[38;5;66;03m# this function, and just call forward.\u001b[39;00m\n\u001b[0;32m   1524\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m (\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_forward_pre_hooks\n\u001b[0;32m   1525\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_backward_pre_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_backward_hooks\n\u001b[0;32m   1526\u001b[0m         \u001b[38;5;129;01mor\u001b[39;00m _global_forward_hooks \u001b[38;5;129;01mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[1;32m-> 1527\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m forward_call(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[0;32m   1529\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m   1530\u001b[0m     result \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[1;32mc:\\Users\\khdeb\\Anaconda3\\envs\\dsaie\\lib\\site-packages\\torch\\nn\\modules\\conv.py:460\u001b[0m, in \u001b[0;36mConv2d.forward\u001b[1;34m(self, input)\u001b[0m\n\u001b[0;32m    459\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mforward\u001b[39m(\u001b[38;5;28mself\u001b[39m, \u001b[38;5;28minput\u001b[39m: Tensor) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m--> 460\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_conv_forward\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43minput\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mweight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mbias\u001b[49m\u001b[43m)\u001b[49m\n",
      "File \u001b[1;32mc:\\Users\\khdeb\\Anaconda3\\envs\\dsaie\\lib\\site-packages\\torch\\nn\\modules\\conv.py:456\u001b[0m, in \u001b[0;36mConv2d._conv_forward\u001b[1;34m(self, input, weight, bias)\u001b[0m\n\u001b[0;32m    452\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpadding_mode \u001b[38;5;241m!=\u001b[39m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mzeros\u001b[39m\u001b[38;5;124m'\u001b[39m:\n\u001b[0;32m    453\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m F\u001b[38;5;241m.\u001b[39mconv2d(F\u001b[38;5;241m.\u001b[39mpad(\u001b[38;5;28minput\u001b[39m, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_reversed_padding_repeated_twice, mode\u001b[38;5;241m=\u001b[39m\u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mpadding_mode),\n\u001b[0;32m    454\u001b[0m                     weight, bias, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mstride,\n\u001b[0;32m    455\u001b[0m                     _pair(\u001b[38;5;241m0\u001b[39m), \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdilation, \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mgroups)\n\u001b[1;32m--> 456\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mF\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mconv2d\u001b[49m\u001b[43m(\u001b[49m\u001b[38;5;28;43minput\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mweight\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbias\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mstride\u001b[49m\u001b[43m,\u001b[49m\n\u001b[0;32m    457\u001b[0m \u001b[43m                \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpadding\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdilation\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mgroups\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[1;31mTypeError\u001b[0m: conv2d() received an invalid combination of arguments - got (method, Parameter, Parameter, tuple, tuple, tuple, int), but expected one of:\n * (Tensor input, Tensor weight, Tensor bias, tuple of ints stride, tuple of ints padding, tuple of ints dilation, int groups)\n      didn't match because some of the arguments have invalid types: (!method!, !Parameter!, !Parameter!, !tuple of (int, int)!, !tuple of (int, int)!, !tuple of (int, int)!, int)\n * (Tensor input, Tensor weight, Tensor bias, tuple of ints stride, str padding, tuple of ints dilation, int groups)\n      didn't match because some of the arguments have invalid types: (!method!, !Parameter!, !Parameter!, !tuple of (int, int)!, !tuple of (int, int)!, !tuple of (int, int)!, int)\n"
     ]
    }
   ],
   "source": [
    "# # Let's try the model recursively!\n",
    "# model.eval()\n",
    "\n",
    "# grid_size = 64\n",
    "# channels = 2\n",
    "# sim_length = 96\n",
    "\n",
    "# # Let's do a crude Monte Carlo with a single model, calculating the loss after each timestep\n",
    "# sim = WaterTopo.load_simulations(str(root)+\"/data/normalized_data/tra_val/\", 1, grid_size)[0]\n",
    "# inputs = np.zeros((1, channels, grid_size, grid_size))\n",
    "# targets = np.zeros((sim_length, grid_size, grid_size))\n",
    "\n",
    "# # Select the time step where you want to start\n",
    "# id = 0\n",
    "\n",
    "# inputs[0, 0, :, :] = sim.topography\n",
    "# inputs[0, 1, :, :] = sim.return_timestep(id)\n",
    "# inputs = torch.tensor(inputs, dtype=torch.float32).to(device)\n",
    "# inputs.cpu()\n",
    "\n",
    "# for t in range(1, sim_length+1):\n",
    "#    targets[t-1,:,:] = sim.return_timestep(t)\n",
    "# targets = torch.tensor(targets, dtype=torch.float32).cpu()\n",
    "\n",
    "# outputs = torch.zeros(targets.shape).cpu()\n",
    "\n",
    "# # print(inputs.shape)\n",
    "# # print(targets.shape)\n",
    "# # print(outputs.shape)\n",
    "# # print(input.shape)\n",
    "\n",
    "# for t in range(0, sim_length):\n",
    "#    outputs[t,:,:] = model(input).cpu()\n",
    "#    inputs[0,1,:,:] = outputs[t,:,:]\n",
    "\n",
    "\n",
    "# # outputs = recursive_pred(model, inputs, 96, include_first_timestep=False)\n",
    "   \n",
    "# mse = mse_per_timestep(targets, outputs)\n",
    "\n",
    "# fig, ax = plt.subplots()\n",
    "# ax.plot(np.arange(0, len(mse)), mse, label=\"MSE\")\n",
    "# ax.set_xlabel(\"time steps\")\n",
    "# ax.set_ylabel(\"MSE\")\n",
    "# ax.set_title(\"CNN - MSE per timestep\")\n",
    "\n",
    "# # f,axs = plt.subplots(2, 4, figsize=(20,10))\n",
    "# # axs = axs.reshape(-1)\n",
    "\n",
    "# # for i in range(0, len(axs), 2):\n",
    "# #   with torch.no_grad():\n",
    "# #       # Randomly select a simulation\n",
    "# #       random_index = random.randint(0, 80)\n",
    "# #       sim = WaterTopo.load_simulations(str(root)+\"/data/normalized_data/tra_val/\", \n",
    "# #                                        1, \n",
    "# #                                        grid_size)[0]\n",
    "\n",
    "# #       inputs = np.zeros((1, channels, grid_size, grid_size))\n",
    "# #       targets = np.zeros((1, grid_size, grid_size))\n",
    "\n",
    "# #       id = random.randint(0, 96)\n",
    "\n",
    "# #       inputs[0, 0,:,:] = sim.topography\n",
    "# #       inputs[0, 1,:,:] = sim.return_timestep(id)\n",
    "# #       targets[0, :,:]  = sim.return_timestep(id+1)\n",
    "\n",
    "# #       # print(inputs.shape)\n",
    "# #       # print(targets.shape)\n",
    "      \n",
    "# #       # inputs, target = inputs.to(device).unsqueeze(0), target.to(device).unsqueeze(0)\n",
    "\n",
    "# #       # Predict\n",
    "# #       inputs = torch.tensor(inputs, dtype=torch.float32).to(device)\n",
    "# #       inputs.cpu()\n",
    "# #       prediction = model(inputs).cpu()\n",
    "\n",
    "# #       # Plotting inputs (time series)\n",
    "# #       axs[i].imshow(targets[0,:,:])\n",
    "# #       axs[i+1].imshow(prediction[0,0,:,:])\n",
    "\n",
    "# #       axs[i].set_title(f\"Target: (test) simulation {random_index}\")\n",
    "# #       axs[i+1].set_title(f\"Prediction: (test) simulation {random_index}\")\n",
    "\n",
    "# # f.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "dsaie",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.17"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
